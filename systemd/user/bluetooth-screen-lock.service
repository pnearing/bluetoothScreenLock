[Unit]
Description=Bluetooth Screen Lock
Documentation=man:bluetooth-screen-lock(1)
After=graphical-session.target

[Service]
Type=simple
# Set a startup delay in seconds if desired; override via a user drop-in:
#   systemctl --user edit bluetooth-screen-lock.service
# and add, for example: Environment=START_DELAY=5
Environment=START_DELAY=0
ExecStartPre=/bin/sleep ${START_DELAY}
ExecStart=/usr/bin/bluetooth-screen-lock
Restart=on-failure

# --- Default sandboxing (defense-in-depth) ---
# These defaults are chosen to work in a user session while reducing blast radius.
# You can override or relax via: systemctl --user edit bluetooth-screen-lock.service
# See systemd.exec(5) for details on each directive.
NoNewPrivileges=yes
PrivateTmp=yes
ProtectControlGroups=yes
ProtectKernelTunables=yes
ProtectSystem=strict

# For user services, ProtectHome=yes can block access to /run/user/$UID (session D-Bus).
# Use read-only to keep $HOME mostly protected while preserving access to the bus.
ProtectHome=read-only

# Allow writes only where needed (matches CONFIG_DIR in src/bluetooth_screen_lock/config.py)
ReadWritePaths=%h/.config/bluetooth-screen-lock

# Limit networking to local sockets and Bluetooth only. If your near_command or other
# features require Internet, override in a drop-in to add AF_INET/AF_INET6.
RestrictAddressFamilies=AF_UNIX AF_BLUETOOTH

RestrictNamespaces=yes
LockPersonality=yes
MemoryDenyWriteExecute=yes

[Install]
WantedBy=graphical-session.target
